package  {	import flash.display.Sprite;	import flash.display.SimpleButton;	import flash.events.MouseEvent;	import flash.display.MovieClip;		import com.greensock.TimelineLite;	import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.easing.Back;	import com.greensock.easing.Strong;		public class PartSelectionMenu {		public static const FADE_BETWEEN_SELECTIONS : Boolean = true;		private static const FADE_OUT_TIME : Number = 0.5;		private static const FADE_IN_TIME : Number = 1.7;		private static const FADE_IN_DELAY : Number = 0.05;				// set to false to remove animation		private static const ANIMATE_BUTTONS : Boolean = true;		private static const ANIMATION_TIME : Number = 0.5;		private static const HIDE_LENGTH : Number = 75;				private var _bodyContainer : Sprite;		private var _eyesContainer : Sprite;		private var _markContainer : Sprite;		private var _characContainer : Sprite;				private var _menuButtons : Array = new Array();				private var _lastContainerActive : Sprite = null;				private var _menuButtonX : Array = new Array();		public function PartSelectionMenu() {			// constructor code		}				public function Initialize(bodyButton : SimpleButton, eyesButton : SimpleButton, 								   markButton : SimpleButton, characButton : SimpleButton) : void {			bodyButton.addEventListener(MouseEvent.MOUSE_DOWN, showBodyObjects);			eyesButton.addEventListener(MouseEvent.MOUSE_DOWN, showEyesObjects);			markButton.addEventListener(MouseEvent.MOUSE_DOWN, showMarkObjects);			characButton.addEventListener(MouseEvent.MOUSE_DOWN, showCharacObjects);						_menuButtonX[_bodyContainer.name] = bodyButton.x;			_menuButtonX[_eyesContainer.name] = eyesButton.x;			_menuButtonX[_markContainer.name] = markButton.x;			_menuButtonX[_characContainer.name] = characButton.x;						// set correct Z order for menu buttons			var parentForButtons = bodyButton.parent;						parentForButtons.removeChild(bodyButton);			parentForButtons.addChildAt(bodyButton, 0);						parentForButtons.removeChild(eyesButton);			parentForButtons.addChildAt(eyesButton, 0);						parentForButtons.removeChild(markButton);			parentForButtons.addChildAt(markButton, 0);						parentForButtons.removeChild(characButton);			parentForButtons.addChildAt(characButton, 0);									_menuButtons[_bodyContainer.name] = bodyButton;			_menuButtons[_eyesContainer.name] = eyesButton;			_menuButtons[_markContainer.name] = markButton;			_menuButtons[_characContainer.name] = characButton;						showBodyObjects(null);		}				private function showBodyObjects(e:MouseEvent) : void {			if (IsTweening()) {				return;			}						if (_bodyContainer.visible == false) {				TransitionToNewPartSelection(_bodyContainer);			}		}				private function showEyesObjects(e:MouseEvent) : void {			if (IsTweening()) {				return;			}						if (_eyesContainer.visible == false) {				TransitionToNewPartSelection(_eyesContainer);			}		}				private function showMarkObjects(e:MouseEvent) : void {			if (IsTweening()) {				return;			}						if (_markContainer.visible == false) {				TransitionToNewPartSelection(_markContainer);			}		}				private function showCharacObjects(e:MouseEvent) : void {			if (IsTweening()) {				return;			}						if (_characContainer.visible == false) {				TransitionToNewPartSelection(_characContainer);			}		}				private function IsTweening() : Boolean {			if (TweenMax.isTweening(_menuButtons[_bodyContainer.name]) ||				TweenMax.isTweening(_menuButtons[_eyesContainer.name]) ||				TweenMax.isTweening(_menuButtons[_markContainer.name]) ||				TweenMax.isTweening(_menuButtons[_characContainer.name])) {					return true;				} else {					return false;				}		}				private function TransitionToNewPartSelection(partsToSeeContainer) : void {			if (FADE_BETWEEN_SELECTIONS) {				if (_lastContainerActive != null) {					FadeOutLastPartSelection(partsToSeeContainer);				} else {					// first time - just fade in					FadeInNewPartSelection(partsToSeeContainer);				}			} else {				partsToSeeContainer.visible = true;								if (_lastContainerActive != null) {					_lastContainerActive.visible = false;				}								_lastContainerActive = partsToSeeContainer;			}		}				private function FadeOutLastPartSelection(containerToSee : Sprite) {			var containerChildren : int = _lastContainerActive.numChildren;						// check zero case			if (containerChildren == 0) {				if (ANIMATE_BUTTONS) {					TweenLite.to(_menuButtons[_lastContainerActive.name], ANIMATION_TIME, {x: _menuButtonX[_lastContainerActive.name], ease: Back.easeInOut });				}								OnFadeOutComplete(containerToSee);								return;			} else {							var tweenList : Array = new Array();								// This loops through each draggable element just for some extra flair				for (var childIndex : int = containerChildren - 1; childIndex >= 0; childIndex--) {					tweenList.push(new TweenLite(_lastContainerActive.getChildAt(childIndex), FADE_OUT_TIME, { alpha: 0,																											   ease: Back.easeOut }));				}								var timeline : TimelineLite = new TimelineLite({ tweens: tweenList,																 align: "normal",																 onComplete: OnFadeOutComplete,																 onCompleteParams: [containerToSee] });																 				timeline.autoRemoveChildren = true;								timeline.play();			}			if (ANIMATE_BUTTONS) {				TweenLite.to(_menuButtons[_lastContainerActive.name], ANIMATION_TIME, {x: _menuButtonX[_lastContainerActive.name], ease: Back.easeInOut });			}		}				private function OnFadeOutComplete(containerToSee : Sprite) {			_lastContainerActive.visible = false;						FadeInNewPartSelection(containerToSee);		}				private function FadeInNewPartSelection(container : Sprite) : void {			container.visible = true;						var containerChildren : int = container.numChildren;						if (containerChildren != 0) {				var tweenList : Array = new Array();								// This loops through each draggable element just for some extra flair				for (var childIndex : int = 0; childIndex < containerChildren; childIndex++) {					tweenList.push(new TweenLite(container.getChildAt(childIndex), FADE_IN_TIME, { alpha: 1,																								   delay: childIndex * FADE_IN_DELAY,																								   ease: Strong.easeOut }));				}								var timeline : TimelineLite = new TimelineLite({ tweens: tweenList,																 align: "normal",																 onComplete: OnFadeInComplete,																 onCompleteParams: [container] });																 				timeline.autoRemoveChildren = true;								timeline.play();			} else {				OnFadeInComplete(container);			}						_lastContainerActive = container;						if (ANIMATE_BUTTONS) {				TweenLite.to(_menuButtons[_lastContainerActive.name], ANIMATION_TIME, {x: _menuButtonX[_lastContainerActive.name] + HIDE_LENGTH, ease: Back.easeInOut});			}		}				private function OnFadeInComplete(containerToSee : Sprite) : void {		}				public function Reset() : void {			showBodyObjects(null);		}				public function set bodyContainer(container : Sprite) : void {			_bodyContainer = container;			_bodyContainer.visible = false;		}				public function set eyesContainer(container : Sprite) : void {			_eyesContainer = container;			_eyesContainer.visible = false;		}				public function set markContainer(container : Sprite) : void {			_markContainer = container;			_markContainer.visible = false;		}				public function set characContainer(container : Sprite) : void {			_characContainer = container;			_characContainer.visible = false;		}	}}