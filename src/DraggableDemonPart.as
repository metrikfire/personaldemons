package  {	import flash.display.MovieClip;import flash.events.MouseEvent;import flash.geom.Point;import com.greensock.TweenLite;import com.greensock.easing.Back;import flash.display.Sprite;		// a Util class to setup all the drag and drop for all the demon parts   public class DraggableDemonPart {		private static const ENABLE_SNAP_BACK_ON_MISS:Boolean = true;		private static const SNAP_TIME:Number = 0.5;				private static var _initialPosition : Array = new Array();		private static var _initialParent : Array = new Array();				private static var _initialPositionX:Number = -1;		private static var _initialPositionY:Number = -1;				private static var _demonBoard : Sprite;				private static var _draggingObject : MovieClip = null;				public static function InitializePart(instance : MovieClip /*containerParent : Sprite*/) : void {			instance.addEventListener(MouseEvent.MOUSE_DOWN, DraggableDemonPart.startPartDrag);			instance.addEventListener(MouseEvent.MOUSE_UP, DraggableDemonPart.stopPartDrag);						if (PartSelectionMenu.FADE_BETWEEN_SELECTIONS) {				instance.alpha = 0;			}						if (ENABLE_SNAP_BACK_ON_MISS) {				var startPoint : Point = new Point(instance.x, instance.y);								_initialPosition[instance.name] = startPoint			}						//_initialParent[instance] = containerParent;		}				private static function startPartDrag(e:MouseEvent):void {			_draggingObject = e.target as MovieClip;						if (_initialParent[_draggingObject.name] == null) {				_initialParent[_draggingObject.name] = _draggingObject.parent;			}				_draggingObject.startDrag();						//if (_draggingObject.parent != _initialParent[_draggingObject]) {				var dragPointGlobal : Point = _draggingObject.parent.localToGlobal(new Point(_draggingObject.x, _draggingObject.y));								_draggingObject.parent.removeChild(_draggingObject); 								_initialParent[_draggingObject.name].parent.addChild(_draggingObject); 									_draggingObject.x = dragPointGlobal.x; 				_draggingObject.y = dragPointGlobal.y;			//}		}		private static function stopPartDrag(e:MouseEvent):void {			_draggingObject.stopDrag();						if (_draggingObject.hitTestObject(_demonBoard)) {				var dropPoint : Point = _demonBoard.globalToLocal( new Point(_draggingObject.x, _draggingObject.y) ); 				_draggingObject.parent.removeChild(_draggingObject); 				_demonBoard.addChild(_draggingObject); 								_draggingObject.x = dropPoint.x; 				_draggingObject.y = dropPoint.y;			} else {				if (ENABLE_SNAP_BACK_ON_MISS) {					var point : Point = _initialPosition[_draggingObject.name] as Point;					TweenLite.to(_draggingObject, SNAP_TIME, {x: point.x, y: point.y, ease : Back.easeOut});										_initialParent[_draggingObject.name].addChild(_draggingObject);				}			}						_draggingObject = null;		}				public static function GetDraggableDemonPartOriginalParentFromInstance(instance : MovieClip) : Sprite {			return _initialParent[instance.name];		}				public static function GetDraggableDemonPartOriginalPositionFromIntance(instance : MovieClip) : Point {			return _initialPosition[instance.name];		}				public static function set demonBoard(board : Sprite) : void {			_demonBoard = board;		}	}}